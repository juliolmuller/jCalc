{"version":3,"sources":["scripts/constants.js","scripts/Calculator.js","scripts/main.js"],"names":["LOCALE","DECIMAL_SEP","MAX_LENGTH","ErrorMsg","GENERAL","DIV_0","OVERFLOW","ADD_SUB","MUL_DIV","OP_SYMBOLS","OP_TRIGGERS","KEYS_MAP","BUTTONS_MAP","ac","ce","ponto","soma","subtracao","multiplicacao","divisao","igual","porcento","Calculator","_time","document","querySelector","_date","_operationElements","_display","_withAudio","_audio","Audio","clickAudio","initialize","_lastOperator","undefined","_lastOperated","_lastButtonPressed","self","refreshDateTime","refreshDisplay","setInterval","initAudioEvent","initButtonsEvents","initKeyboardEvents","displayTime","currentDate","toLocaleTimeString","opt","displayDate","toLocaleDateString","day","month","year","value","lastNumber","toString","Number","isNaN","integerLen","addDecimalSep","indexOf","decimalLen","substr","length","throwError","parseFloat","toFixed","display","hasDecimals","string","img","getElementById","addEventListener","playAudio","src","soundOnIcon","soundOffIcon","buttons","querySelectorAll","forEach","event","button","textButton","className","baseVal","replace","pressButton","style","cursor","key","toLowerCase","ctrlKey","copyFromDisplay","content","clipboardData","getData","alert","captureOperation","console","log","input","createElement","body","appendChild","select","execCommand","remove","buttonText","clearAll","clearEntry","calculate","currentTime","play","operation","isDividingByZero","pushOperation","len","result","push","eval","join","errorMessage","isOperator","lastOperationElement","parseInt","innerHTML","time","date","Date"],"mappings":"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","file":"main.d24ff1c2.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n * Definir constantes globais\r\n */\r\nexport default {\r\n  LOCALE: 'PT-BR',\r\n  DECIMAL_SEP: '.',\r\n  MAX_LENGTH: 10,\r\n  ErrorMsg: {\r\n    GENERAL: '#ERROR#',\r\n    DIV_0: '#DIV 0#',\r\n    OVERFLOW: '#OVERFLOW#',\r\n  },\r\n  ADD_SUB: ['+', '-'],\r\n  MUL_DIV: ['*', '/'],\r\n  OP_SYMBOLS: ['+', '-', '*', '/'],\r\n  OP_TRIGGERS: ['=', '%'],\r\n  KEYS_MAP: {\r\n    '0': '0',\r\n    '1': '1',\r\n    '2': '2',\r\n    '3': '3',\r\n    '4': '4',\r\n    '5': '5',\r\n    '6': '6',\r\n    '7': '7',\r\n    '8': '8',\r\n    '9': '9',\r\n    '.': 'ponto',\r\n    ',': 'ponto',\r\n    '+': 'soma',\r\n    '-': 'subtracao',\r\n    '*': 'multiplicacao',\r\n    '/': 'divisao',\r\n    '=': 'igual',\r\n    'enter': 'igual',\r\n    '%': 'porcento',\r\n    'escape': 'ac',\r\n    'backspace': 'ce',\r\n    'delete': 'ce',\r\n    'c': 'copy',\r\n  },\r\n  BUTTONS_MAP: {\r\n    0: 0,\r\n    1: 1,\r\n    2: 2,\r\n    3: 3,\r\n    4: 4,\r\n    5: 5,\r\n    6: 6,\r\n    7: 7,\r\n    8: 8,\r\n    9: 9,\r\n    ac: 'ac',\r\n    ce: 'ce',\r\n    ponto: '.',\r\n    soma: '+',\r\n    subtracao: '-',\r\n    multiplicacao: '*',\r\n    divisao: '/',\r\n    igual: '=',\r\n    porcento: '%',\r\n  },\r\n}\r\n","import opt from './constants'\r\nimport clickAudio from '../assets/audio/click.mp3'\r\nimport soundOnIcon from '../assets/images/sound-on.png'\r\nimport soundOffIcon from '../assets/images/sound-off.png'\r\n\r\nexport default class Calculator {\r\n\r\n  constructor() {\r\n\r\n    // Declarar atributos e seus valores padrões\r\n    this._time = document.querySelector('#hora')\r\n    this._date = document.querySelector('#data')\r\n    this._operationElements = [0]\r\n    this._display = document.querySelector('#display')\r\n    this._withAudio = true\r\n\r\n    // Configurar som de clique\r\n    this._audio = new Audio(clickAudio)\r\n\r\n    // Executar método de inicialização da aplicação\r\n    this.initialize()\r\n\r\n    // Iniciar atributos que retem histórico de operações\r\n    this._lastOperator = undefined\r\n    this._lastOperated = undefined\r\n    this._lastButtonPressed = undefined\r\n  }\r\n\r\n  initialize() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Exibir conteúdo inicial no display\r\n    self.refreshDateTime()\r\n    self.refreshDisplay()\r\n\r\n    // Executar 'refresh' do relógio\r\n    setInterval(() => self.refreshDateTime(), 1000)\r\n\r\n    // Configurar eventos de clique e teclado\r\n    self.initAudioEvent()\r\n    self.initButtonsEvents()\r\n    self.initKeyboardEvents()\r\n  }\r\n\r\n  refreshDateTime() {\r\n\r\n    // Chamar data e hora atuais e formatá-las\r\n    this.displayTime = this.currentDate.toLocaleTimeString(opt.LOCALE)\r\n    this.displayDate = this.currentDate.toLocaleDateString(opt.LOCALE, { day: '2-digit', month: 'long', year: 'numeric' })\r\n  }\r\n\r\n  refreshDisplay(value) {\r\n\r\n    // Validar se foi passado parâmetro\r\n    value = value || this.lastNumber.toString()\r\n\r\n    // Tratar valor se ele for numérico\r\n    if (!Number.isNaN(value)) {\r\n\r\n      // Converter valor em 'string'\r\n      value = value.toString()\r\n\r\n      // Verificar se o valor é numérico e ajustar separador decimal\r\n      value = this.addDecimalSep(value)\r\n\r\n      // Salvar propriedades do valor\r\n      const integerLen = value.indexOf(opt.DECIMAL_SEP)\r\n      const decimalLen = value.substr(integerLen + 1, opt.MAX_LENGTH - integerLen).length\r\n\r\n      // Retornar erro se número de casas inteiras forem superior ao máximo\r\n      if (integerLen > opt.MAX_LENGTH) {\r\n        this.throwError(opt.ErrorMsg.OVERFLOW)\r\n        return\r\n\r\n      // Arredondar casas decimais para caber na tela\r\n      } if (decimalLen >= 0) {\r\n\r\n        value = parseFloat(parseFloat(value).toFixed(decimalLen))\r\n      }\r\n\r\n      // Verificar se o valor é numérico e ajustar separador decimal\r\n      value = this.addDecimalSep(value)\r\n    }\r\n\r\n    // Exibir valor na tela\r\n    this.display = value\r\n  }\r\n\r\n  addDecimalSep(value) {\r\n\r\n    // Verificar se o valor é numérico e ajustar separador decimal\r\n    if (!this.hasDecimals(value)) {\r\n      value += opt.DECIMAL_SEP\r\n    }\r\n    return value\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  hasDecimals(string) {\r\n\r\n    // Contar o número de separadores decimais do parâmetro\r\n    return (string.toString().indexOf(opt.DECIMAL_SEP) > -1)\r\n  }\r\n\r\n  initAudioEvent() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Criar evento para ligar e desligar o som das teclas\r\n    const img = document.getElementById('toggle-audio')\r\n    img.addEventListener('click', () => {\r\n      self._withAudio = !self._withAudio\r\n\r\n      // Alternar ícone de som\r\n      if (self._withAudio) {\r\n        self.playAudio()\r\n        img.src = soundOnIcon\r\n      } else {\r\n        img.src = soundOffIcon\r\n      }\r\n    })\r\n  }\r\n\r\n  initButtonsEvents() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Capturar todos os elementos HTML relacionados aos botões\r\n    const buttons = document.querySelectorAll('#buttons > g, #parts > g')\r\n\r\n    // Iterar sobre tipos de evento de clique do mouse\r\n    ;['click', 'drag'].forEach((event) => {\r\n\r\n      // Iterar sobre os elementos, configurando o evento\r\n      buttons.forEach((button) => {\r\n\r\n        // Definir evento para cliques simples e longos\r\n        button.addEventListener(event, () => {\r\n\r\n          // Retornar valor de elemento clicado\r\n          const textButton = button.className.baseVal.replace('btn-', '')\r\n          self.pressButton(textButton)\r\n        })\r\n      })\r\n    })\r\n\r\n    // Iterar sobre tipos de evento de ponteiro do mouse\r\n    ;['mouseover', 'mouseup', 'mousedown'].forEach((event) => {\r\n\r\n      // Iterar sobre os elementos, configurando o evento\r\n      buttons.forEach((button) => {\r\n\r\n        // Exibir ponteiro de 'clicável' quando mouse passar sobre botões\r\n        button.addEventListener(event, () => {\r\n          button.style.cursor = 'pointer'\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  initKeyboardEvents() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Definir evento de teclas pressionada do teclado\r\n    document.addEventListener('keyup', (event) => {\r\n\r\n      // Chamar botão equivalente (ver constante 'KEYS_MAP')\r\n      const key = event.key.toLowerCase()\r\n      if (event.ctrlKey && key === 'c') {\r\n        self.playAudio()\r\n        self.copyFromDisplay()\r\n      } else {\r\n        self.pressButton(opt.KEYS_MAP[key])\r\n      }\r\n    })\r\n\r\n    // Definir evento de colagem de texto da Área de Transferência\r\n    document.addEventListener('paste', (event) => {\r\n      const content = event.clipboardData.getData('Text')\r\n\r\n      // Validar texto colado como número\r\n      if (Number.isNaN(content)) {\r\n        // eslint-disable-next-line no-alert\r\n        alert(`Você está tentando colar conteúdo que não é numérico:\\n\"${content}\"`)\r\n      } else {\r\n        self.playAudio()\r\n        self.captureOperation(content)\r\n        self.refreshDisplay()\r\n        // eslint-disable-next-line no-console\r\n        console.log('Conteúdo colado com sucesso!')\r\n      }\r\n    })\r\n  }\r\n\r\n  copyFromDisplay() {\r\n\r\n    // Criar um elemento HTML para armazenar o valor do display\r\n    const input = document.createElement('input')\r\n    document.body.appendChild(input)\r\n\r\n    // Copiar conteúdo do display para o 'input'\r\n    input.value = parseFloat(this.display)\r\n\r\n    // Selecionar conteúdo e copiar para a Área de Transferência\r\n    input.select()\r\n    document.execCommand('Copy')\r\n\r\n    // Excluir elemento HTML\r\n    input.remove()\r\n    console.log('Conteúdo copiado com sucesso!')\r\n  }\r\n\r\n  pressButton(buttonText) {\r\n\r\n    // Verificar se foi pressionada uma tecla válida\r\n    if (buttonText in opt.BUTTONS_MAP) {\r\n\r\n      // Executar son de clique (se ativado)\r\n      this.playAudio()\r\n\r\n      // Executar ação a partir de tecla selecionada\r\n      switch (buttonText) {\r\n        case 'ac':\r\n          this.clearAll()\r\n          break\r\n        case 'ce':\r\n          this.clearEntry()\r\n          break\r\n        case 'igual':\r\n        case 'porcento':\r\n          this.calculate(opt.BUTTONS_MAP[buttonText])\r\n          break\r\n        default:\r\n          this.captureOperation(opt.BUTTONS_MAP[buttonText])\r\n      }\r\n\r\n      // Registrar ultimo botão pressionado e atualizar display\r\n      this._lastButtonPressed = opt.BUTTONS_MAP[buttonText]\r\n      this.refreshDisplay()\r\n    }\r\n  }\r\n\r\n  playAudio() {\r\n\r\n    // Verificar se o interruptor de aúdio está ligado\r\n    if (this._withAudio) {\r\n\r\n      // Colocar 'agulha' de áudio na posição zero\r\n      this._audio.currentTime = 0\r\n      this._audio.play()\r\n    }\r\n  }\r\n\r\n  clearAll() {\r\n\r\n    // Apaga todos os registros de operações\r\n    this._operationElements = [0]\r\n    this._lastOperator = undefined\r\n    this._lastOperated = undefined\r\n  }\r\n\r\n  clearEntry() {\r\n\r\n    // Apaga o último registro de operações\r\n    if (this._operationElements.length === 1) {\r\n      this.clearAll()\r\n    } else if (this._operationElements.length === 3) {\r\n      this._operationElements[2] = 0\r\n    }\r\n  }\r\n\r\n  calculate(operation) {\r\n\r\n    // Verificar se parâmetro contém valor aceitável\r\n    if (opt.OP_TRIGGERS.indexOf(operation) === -1) {\r\n      return\r\n    }\r\n\r\n    // Declarar função para avaliar se a operação realizará divisão por 0 (zero)\r\n    const isDividingByZero = () => {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (this._operationElements[1] === '/' && this._operationElements[2] == 0) {\r\n        this._operationElements = [0]\r\n        this.throwError(opt.ErrorMsg.DIV_0)\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    // Avaliar se trata-se de repetição da última operação\r\n    if (opt.OP_TRIGGERS.indexOf(this._lastButtonPressed) > -1 && operation === '=') {\r\n      this.pushOperation(this._lastOperator)\r\n      this.pushOperation(this._lastOperated)\r\n    }\r\n\r\n    // Declarar variáveis locais\r\n    const len = this._operationElements.length\r\n    let result\r\n    switch (len) {\r\n\r\n      case 1:\r\n        if (operation === '%') {\r\n          result = this._operationElements[0] / 100\r\n        } else if (operation === '=') {\r\n          [result] = this._operationElements\r\n        }\r\n        break\r\n\r\n      case 2:\r\n        this._operationElements.push(this._operationElements[0])\r\n        /* falls through */\r\n\r\n      case 3:\r\n        if (isDividingByZero()) {\r\n          return\r\n        }\r\n\r\n        if (operation === '%') {\r\n          if (opt.ADD_SUB.indexOf(this._operationElements[1]) > -1) {\r\n            this._operationElements[2] = (this._operationElements[0] * this._operationElements[2]) / 100\r\n          } else {\r\n            this._operationElements[2] /= 100\r\n          }\r\n        }\r\n\r\n        // Salvar últimas operações\r\n        [, this._lastOperator, this._lastOperated] = this._operationElements\r\n\r\n        // Fazer o parse dos dos elementos da operação e executar cálculo\r\n        // eslint-disable-next-line no-eval\r\n        result = eval(this._operationElements.join(''))\r\n        break\r\n\r\n      default:\r\n        /* do nothing */\r\n    }\r\n\r\n    // Salvar resultado como elemento de operações\r\n    this._operationElements = [result]\r\n  }\r\n\r\n  throwError(errorMessage = undefined) {\r\n\r\n    // Verificar se houve parâmetro informado\r\n    errorMessage = errorMessage || opt.ErrorMsg.GENERAL\r\n\r\n    // Exibi mensagem de rro na tela\r\n    this.refreshDisplay(errorMessage)\r\n  }\r\n\r\n  captureOperation(value) {\r\n\r\n    // Se o último elemento da operação for um operador aritmético\r\n    if (this.isOperator(this.lastOperationElement)) {\r\n\r\n      // Substituir operador aritmético se input for também um operador aritmético\r\n      if (this.isOperator(value)) {\r\n        this.lastOperationElement = value\r\n\r\n      // Inserir '0.' como novo elemento da operação se o input for o separador decimal\r\n      } else if (value === opt.DECIMAL_SEP) {\r\n        this.pushOperation(`0${opt.DECIMAL_SEP}`)\r\n\r\n      // Adicionar novo elemento à operação como número, se um número foi digitado\r\n      } else if (!Number.isNaN(value)) {\r\n        this.pushOperation(parseInt(value, 10))\r\n      }\r\n\r\n    // Se o último elemento da operação for um 'number'\r\n    } else if (!Number.isNaN(this.lastOperationElement)) {\r\n\r\n      // Adicionar input operador como novo elemento da operação\r\n      if (this.isOperator(value)) {\r\n        this.pushOperation(value)\r\n\r\n      // Reiniciar operação se o último valor é resultado de outra operação\r\n      } else if (this._lastButtonPressed === '=' && !Number.isNaN(value)) {\r\n\r\n        // Inserir '0.' como novo elemento da operação se o input for o separador decimal\r\n        if (value === opt.DECIMAL_SEP) {\r\n          this._operationElements = [`0${opt.DECIMAL_SEP}`]\r\n\r\n        // Adicionar novo elemento à operação como número, se um número foi digitado\r\n        } else if (!Number.isNaN(value)) {\r\n          this._operationElements = [parseInt(value, 10)]\r\n        }\r\n\r\n      // Concatenar input separador decimal se ainda não há separadores no valor atual\r\n      } else if (value === opt.DECIMAL_SEP && !this.hasDecimals(this.lastOperationElement)) {\r\n        this.lastOperationElement += value\r\n\r\n      // Concatenar input numérico ao valor atual\r\n      } else if (!Number.isNaN(value)) {\r\n\r\n        // Se o input já tem valores decimais, simplesmente concatenar\r\n        // eslint-disable-next-line eqeqeq\r\n        if (value == 0 && this.hasDecimals(this.lastOperationElement)) {\r\n          this.lastOperationElement += value\r\n\r\n        // Caso contrário, fazer o parse para 'string' e concatenar\r\n        } else {\r\n          this.lastOperationElement = parseFloat(this.lastOperationElement + value)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  isOperator(value) {\r\n\r\n    // Avaliar se o parâmetro é um operador aritmético\r\n    return (opt.OP_SYMBOLS.indexOf(value) > -1)\r\n  }\r\n\r\n  pushOperation(value) {\r\n\r\n    // Dr já há 3 elementos na operação, calculá-la antes\r\n    if (this._operationElements.length === 3) {\r\n      this.calculate('=')\r\n    }\r\n\r\n    // Adicionar elemento à operação\r\n    this._operationElements.push(value)\r\n  }\r\n\r\n  get lastNumber() {\r\n\r\n    // Retornar último elemento numérico\r\n    if (2 in this._operationElements) {\r\n      return this._operationElements[2]\r\n    }\r\n    return this._operationElements[0]\r\n  }\r\n\r\n  get lastOperationElement() {\r\n\r\n    // Retornar valor do último elemento da operação\r\n    return this._operationElements[this._operationElements.length - 1].toString()\r\n  }\r\n\r\n  set lastOperationElement(value) {\r\n\r\n    // Definir valor do último elemento da operação\r\n    this._operationElements[this._operationElements.length - 1] = value\r\n  }\r\n\r\n  get display() {\r\n\r\n    // Retornar valor impresso no display\r\n    return this._display.innerHTML\r\n  }\r\n\r\n  set display(value) {\r\n\r\n    // Inserir valor no elemento HTML\r\n    this._display.innerHTML = value\r\n  }\r\n\r\n  set displayTime(time) {\r\n\r\n    // ColocarPosicionar hora em elemento HTML\r\n    this._time.innerHTML = time\r\n  }\r\n\r\n  set displayDate(date) {\r\n\r\n    // ColocarPosicionar data em elemento HTML\r\n    this._date.innerHTML = date\r\n  }\r\n\r\n  // Retornar objeto 'Date' com a data e hora atuais\r\n  // eslint-disable-next-line class-methods-use-this\r\n  get currentDate() {\r\n    return new Date()\r\n  }\r\n}\r\n","import Calculator from './Calculator'\r\n\r\nnew Calculator()\r\n"]}