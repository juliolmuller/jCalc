{"version":3,"sources":["scripts/constants.js","scripts/Calculator.js","scripts/main.js"],"names":["LOCALE","DECIMAL_SEP","MAX_LENGTH","ErrorMsg","GENERAL","DIV_0","OVERFLOW","ADD_SUB","MUL_DIV","OP_SYMBOLS","OP_TRIGGERS","KEYS_MAP","BUTTONS_MAP","Calculator","_time","document","querySelector","_date","_operationElements","_display","_withAudio","_audio","Audio","clickAudio","initialize","_lastOperator","undefined","_lastOperated","_lastButtonPressed","self","refreshDateTime","refreshDisplay","setInterval","initAudioEvent","initButtonsEvents","initKeyboardEvents","displayTime","currentDate","toLocaleTimeString","opt","displayDate","toLocaleDateString","day","month","year","value","lastNumber","toString","isNaN","addDecimalSep","integerLen","indexOf","decimalLen","substr","length","throwError","parseFloat","toFixed","display","hasDecimals","string","img","getElementById","addEventListener","event","playAudio","src","soundOnIcon","soundOffIcon","buttons","querySelectorAll","forEach","button","textButton","className","baseVal","replace","pressButton","style","cursor","key","toLowerCase","ctrlKey","copyFromDisplay","content","clipboardData","getData","alert","captureOperation","console","log","input","createElement","body","appendChild","select","execCommand","remove","buttonText","clearAll","clearEntry","calculate","currentTime","play","operation","isDividingByZero","pushOperation","len","result","push","eval","join","errorMessage","isOperator","lastOperationElement","parseInt","innerHTML","time","date","Date"],"mappings":"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","file":"main.d8ebb8d6.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n * Definir constantes globais\r\n */\r\nexport default {\r\n  LOCALE: 'PT-BR',\r\n  DECIMAL_SEP: '.',\r\n  MAX_LENGTH: 10,\r\n  ErrorMsg: {\r\n    GENERAL: '#ERROR#',\r\n    DIV_0: '#DIV 0#',\r\n    OVERFLOW: '#OVERFLOW#'\r\n  },\r\n  ADD_SUB: ['+', '-'],\r\n  MUL_DIV: ['*', '/'],\r\n  OP_SYMBOLS: ['+', '-', '*', '/'],\r\n  OP_TRIGGERS: ['=', '%'],\r\n  KEYS_MAP: {\r\n    '0': '0',\r\n    '1': '1',\r\n    '2': '2',\r\n    '3': '3',\r\n    '4': '4',\r\n    '5': '5',\r\n    '6': '6',\r\n    '7': '7',\r\n    '8': '8',\r\n    '9': '9',\r\n    '.': 'ponto',\r\n    ',': 'ponto',\r\n    '+': 'soma',\r\n    '-': 'subtracao',\r\n    '*': 'multiplicacao',\r\n    '/': 'divisao',\r\n    '=': 'igual',\r\n    'enter': 'igual',\r\n    '%': 'porcento',\r\n    'escape': 'ac',\r\n    'backspace': 'ce',\r\n    'delete': 'ce',\r\n    'c': 'copy'\r\n  },\r\n  BUTTONS_MAP: {\r\n    '0': 0,\r\n    '1': 1,\r\n    '2': 2,\r\n    '3': 3,\r\n    '4': 4,\r\n    '5': 5,\r\n    '6': 6,\r\n    '7': 7,\r\n    '8': 8,\r\n    '9': 9,\r\n    'ac': 'ac',\r\n    'ce': 'ce',\r\n    'ponto': '.',\r\n    'soma': '+',\r\n    'subtracao': '-',\r\n    'multiplicacao': '*',\r\n    'divisao': '/',\r\n    'igual': '=',\r\n    'porcento': '%'\r\n  }\r\n}\r\n","import opt from './constants'\r\nimport clickAudio from '../assets/audio/click.mp3'\r\nimport soundOnIcon from '../assets/images/sound-on.png'\r\nimport soundOffIcon from '../assets/images/sound-off.png'\r\n\r\nexport default class Calculator {\r\n\r\n  constructor() {\r\n\r\n    // Declarar atributos e seus valores padrões\r\n    this._time = document.querySelector('#hora')\r\n    this._date = document.querySelector('#data')\r\n    this._operationElements = [0]\r\n    this._display = document.querySelector('#display')\r\n    this._withAudio = true\r\n\r\n    // Configurar som de clique\r\n    this._audio = new Audio(clickAudio)\r\n\r\n    // Executar método de inicialização da aplicação\r\n    this.initialize()\r\n\r\n    // Iniciar atributos que retem histórico de operações\r\n    this._lastOperator = undefined\r\n    this._lastOperated = undefined\r\n    this._lastButtonPressed = undefined\r\n  }\r\n\r\n  initialize() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Exibir conteúdo inicial no display\r\n    self.refreshDateTime()\r\n    self.refreshDisplay()\r\n\r\n    // Executar 'refresh' do relógio\r\n    setInterval(function() {\r\n      self.refreshDateTime()\r\n    }, 1000)\r\n\r\n    // Configurar eventos de clique e teclado\r\n    self.initAudioEvent()\r\n    self.initButtonsEvents()\r\n    self.initKeyboardEvents()\r\n  }\r\n\r\n  refreshDateTime() {\r\n\r\n    // Chamar data e hora atuais e formatá-las\r\n    this.displayTime = this.currentDate.toLocaleTimeString(opt.LOCALE)\r\n    this.displayDate = this.currentDate.toLocaleDateString(opt.LOCALE, { day: '2-digit', month: 'long', year: 'numeric' })\r\n  }\r\n\r\n  refreshDisplay(value = undefined) {\r\n\r\n    // Validar se foi passado parâmetro\r\n    value = value || this.lastNumber.toString()\r\n\r\n    // Tratar valor se ele for numérico\r\n    if (!isNaN(value)) {\r\n\r\n      // Converter valor em 'string'\r\n      value = value.toString()\r\n\r\n      // Verificar se o valor é numérico e ajustar separador decimal\r\n      value = this.addDecimalSep(value)\r\n\r\n      // Salvar propriedades do valor\r\n      const integerLen = value.indexOf(opt.DECIMAL_SEP)\r\n      const decimalLen = value.substr(integerLen + 1, opt.MAX_LENGTH - integerLen).length\r\n\r\n      // Retornar erro se número de casas inteiras forem superior ao máximo\r\n      if (integerLen > opt.MAX_LENGTH) {\r\n        this.throwError(opt.ErrorMsg.OVERFLOW)\r\n        return\r\n\r\n      // Arredondar casas decimais para caber na tela\r\n      } else if (decimalLen >= 0) {\r\n\r\n        value = parseFloat(parseFloat(value).toFixed(decimalLen))\r\n      }\r\n\r\n      // Verificar se o valor é numérico e ajustar separador decimal\r\n      value = this.addDecimalSep(value)\r\n    }\r\n\r\n    // Exibir valor na tela\r\n    this.display = value\r\n  }\r\n\r\n  addDecimalSep(value) {\r\n\r\n    // Verificar se o valor é numérico e ajustar separador decimal\r\n    if (!this.hasDecimals(value)) {\r\n      value = value + opt.DECIMAL_SEP\r\n    }\r\n    return value\r\n  }\r\n\r\n  hasDecimals(string) {\r\n\r\n    // Contar o número de separadores decimais do parâmetro\r\n    return (string.toString().indexOf(opt.DECIMAL_SEP) > -1)\r\n  }\r\n\r\n  initAudioEvent() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Criar evento para ligar e desligar o som das teclas\r\n    const img = document.getElementById('toggle-audio')\r\n    img.addEventListener('click', event => {\r\n      self._withAudio = !self._withAudio\r\n\r\n      // Alternar ícone de som\r\n      if (self._withAudio) {\r\n        self.playAudio()\r\n        img.src = soundOnIcon\r\n      } else {\r\n        img.src = soundOffIcon\r\n      }\r\n    })\r\n  }\r\n\r\n  initButtonsEvents() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Capturar todos os elementos HTML relacionados aos botões\r\n    const buttons = document.querySelectorAll('#buttons > g, #parts > g')\r\n\r\n    // Iterar sobre tipos de evento de clique do mouse\r\n    ;['click', 'drag'].forEach(event => {\r\n\r\n      // Iterar sobre os elementos, configurando o evento\r\n      buttons.forEach(button => {\r\n\r\n        // Definir evento para cliques simples e longos\r\n        button.addEventListener(event, function() {\r\n\r\n          // Retornar valor de elemento clicado\r\n          const textButton = button.className.baseVal.replace('btn-', '')\r\n          self.pressButton(textButton)\r\n        })\r\n      })\r\n    })\r\n\r\n    // Iterar sobre tipos de evento de ponteiro do mouse\r\n    ;['mouseover', 'mouseup', 'mousedown'].forEach(event => {\r\n\r\n      // Iterar sobre os elementos, configurando o evento\r\n      buttons.forEach(button => {\r\n\r\n        // Exibir ponteiro de 'clicável' quando mouse passar sobre botões\r\n        button.addEventListener(event, function() {\r\n          button.style.cursor = 'pointer'\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  initKeyboardEvents() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Definir evento de teclas pressionada do teclado\r\n    document.addEventListener('keyup', event => {\r\n\r\n      // Chamar botão equivalente (ver constante 'KEYS_MAP')\r\n      const key = event.key.toLowerCase()\r\n      if (event.ctrlKey && key === 'c') {\r\n        self.playAudio()\r\n        self.copyFromDisplay()\r\n      } else {\r\n        self.pressButton(opt.KEYS_MAP[key])\r\n      }\r\n    })\r\n\r\n    // Definir evento de colagem de texto da Área de Transferência\r\n    document.addEventListener('paste', event => {\r\n      const content = event.clipboardData.getData('Text')\r\n\r\n      // Validar texto colado como número\r\n      if (isNaN(content)) {\r\n        alert(`Você está tentando colar conteúdo que não é numérico:\\n\"${content}\"`)\r\n      } else {\r\n        self.playAudio()\r\n        self.captureOperation(content)\r\n        self.refreshDisplay()\r\n        console.log('Conteúdo colado com sucesso!')\r\n      }\r\n    })\r\n  }\r\n\r\n  copyFromDisplay() {\r\n\r\n    // Criar um elemento HTML para armazenar o valor do display\r\n    const input = document.createElement('input')\r\n    document.body.appendChild(input)\r\n\r\n    // Copiar conteúdo do display para o 'input'\r\n    input.value = parseFloat(this.display)\r\n\r\n    // Selecionar conteúdo e copiar para a Área de Transferência\r\n    input.select()\r\n    document.execCommand('Copy')\r\n\r\n    // Excluir elemento HTML\r\n    input.remove()\r\n    console.log('Conteúdo copiado com sucesso!')\r\n  }\r\n\r\n  pressButton(buttonText) {\r\n\r\n    // Verificar se foi pressionada uma tecla válida\r\n    if (buttonText in opt.BUTTONS_MAP) {\r\n\r\n      // Executar son de clique (se ativado)\r\n      this.playAudio()\r\n\r\n      // Executar ação a partir de tecla selecionada\r\n      switch (buttonText) {\r\n        case 'ac':\r\n          this.clearAll()\r\n          break\r\n        case 'ce':\r\n          this.clearEntry()\r\n          break\r\n        case 'igual':\r\n        case 'porcento':\r\n          this.calculate(opt.BUTTONS_MAP[buttonText])\r\n          break\r\n        default:\r\n          this.captureOperation(opt.BUTTONS_MAP[buttonText])\r\n      }\r\n\r\n      // Registrar ultimo botão pressionado e atualizar display\r\n      this._lastButtonPressed = opt.BUTTONS_MAP[buttonText]\r\n      this.refreshDisplay()\r\n    }\r\n  }\r\n\r\n  playAudio() {\r\n\r\n    // Verificar se o interruptor de aúdio está ligado\r\n    if (this._withAudio) {\r\n\r\n      // Colocar 'agulha' de áudio na posição zero\r\n      this._audio.currentTime = 0\r\n      this._audio.play()\r\n    }\r\n  }\r\n\r\n  clearAll() {\r\n\r\n    // Apaga todos os registros de operações\r\n    this._operationElements = [0]\r\n    this._lastOperator = undefined\r\n    this._lastOperated = undefined\r\n  }\r\n\r\n  clearEntry() {\r\n\r\n    // Apaga o último registro de operações\r\n    if (this._operationElements.length === 1) {\r\n      this.clearAll()\r\n    } else if (this._operationElements.length === 3) {\r\n      this._operationElements[2] = 0\r\n    }\r\n  }\r\n\r\n  calculate(operation) {\r\n\r\n    // Verificar se parâmetro contém valor aceitável\r\n    if (opt.OP_TRIGGERS.indexOf(operation) === -1) {\r\n      return\r\n    }\r\n\r\n    // Declarar função para avaliar se a operação realizará divisão por 0 (zero)\r\n    const isDividingByZero = () => {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (this._operationElements[1] === '/' && this._operationElements[2] == 0) {\r\n        this._operationElements = [0]\r\n        this.throwError(opt.ErrorMsg.DIV_0)\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    // Avaliar se trata-se de repetição da última operação\r\n    if (opt.OP_TRIGGERS.indexOf(this._lastButtonPressed) > -1 && operation === '=') {\r\n      this.pushOperation(this._lastOperator)\r\n      this.pushOperation(this._lastOperated)\r\n    }\r\n\r\n    // Declarar variáveis locais\r\n    const len = this._operationElements.length\r\n    let result\r\n    switch (len) {\r\n\r\n      case 1:\r\n        if (operation === '%') {\r\n          result = this._operationElements[0] / 100\r\n        } else if (operation === '=') {\r\n          result = this._operationElements[0]\r\n        }\r\n        break\r\n\r\n      case 2:\r\n        this._operationElements.push(this._operationElements[0])\r\n        // falls through\r\n\r\n      case 3:\r\n        if (isDividingByZero()) {\r\n          return\r\n        }\r\n\r\n        if (operation === '%') {\r\n          if (opt.ADD_SUB.indexOf(this._operationElements[1]) > -1) {\r\n            this._operationElements[2] = this._operationElements[0] * this._operationElements[2] / 100\r\n          } else {\r\n            this._operationElements[2] = this._operationElements[2] / 100\r\n          }\r\n        }\r\n\r\n        // Salvar últimas operações\r\n        this._lastOperator = this._operationElements[1]\r\n        this._lastOperated = this._operationElements[2]\r\n\r\n        // Fazer o parse dos dos elementos da operação e executar cálculo\r\n        result = eval(this._operationElements.join(''))\r\n    }\r\n\r\n    // Salvar resultado como elemento de operações\r\n    this._operationElements = [result]\r\n  }\r\n\r\n  throwError(errorMessage = undefined) {\r\n\r\n    // Verificar se houve parâmetro informado\r\n    errorMessage = errorMessage || opt.ErrorMsg.GENERAL\r\n\r\n    // Exibi mensagem de rro na tela\r\n    this.refreshDisplay(errorMessage)\r\n  }\r\n\r\n  captureOperation(value) {\r\n\r\n    // Se o último elemento da operação for um operador aritmético\r\n    if (this.isOperator(this.lastOperationElement)) {\r\n\r\n      // Substituir operador aritmético se input for também um operador aritmético\r\n      if (this.isOperator(value)) {\r\n        this.lastOperationElement = value\r\n\r\n      // Inserir '0.' como novo elemento da operação se o input for o separador decimal\r\n      } else if (value === opt.DECIMAL_SEP) {\r\n        this.pushOperation('0' + opt.DECIMAL_SEP)\r\n\r\n      // Adicionar novo elemento à operação como número, se um número foi digitado\r\n      } else if (!isNaN(value)) {\r\n        this.pushOperation(parseInt(value))\r\n      }\r\n\r\n    // Se o último elemento da operação for um 'number'\r\n    } else if (!isNaN(this.lastOperationElement)) {\r\n\r\n      // Adicionar input operador como novo elemento da operação\r\n      if (this.isOperator(value)) {\r\n        this.pushOperation(value)\r\n\r\n      // Reiniciar operação se o último valor é resultado de outra operação\r\n      } else if (this._lastButtonPressed === '=' && !isNaN(value)) {\r\n\r\n        // Inserir '0.' como novo elemento da operação se o input for o separador decimal\r\n        if (value === opt.DECIMAL_SEP) {\r\n          this._operationElements = ['0' + opt.DECIMAL_SEP]\r\n\r\n        // Adicionar novo elemento à operação como número, se um número foi digitado\r\n        } else if (!isNaN(value)) {\r\n          this._operationElements = [parseInt(value)]\r\n        }\r\n\r\n      // Concatenar input separador decimal se ainda não há separadores no valor atual\r\n      } else if (value === opt.DECIMAL_SEP && !this.hasDecimals(this.lastOperationElement)) {\r\n        this.lastOperationElement += value\r\n\r\n      // Concatenar input numérico ao valor atual\r\n      } else if (!isNaN(value)) {\r\n\r\n        // Se o input já tem valores decimais, simplesmente concatenar\r\n        // eslint-disable-next-line eqeqeq\r\n        if (value == 0 && this.hasDecimals(this.lastOperationElement)) {\r\n          this.lastOperationElement += value\r\n\r\n        // Caso contrário, fazer o parse para 'string' e concatenar\r\n        } else {\r\n          this.lastOperationElement = parseFloat(this.lastOperationElement + value)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  isOperator(value) {\r\n\r\n    // Avaliar se o parâmetro é um operador aritmético\r\n    return (opt.OP_SYMBOLS.indexOf(value) > -1)\r\n  }\r\n\r\n  pushOperation(value) {\r\n\r\n    // Dr já há 3 elementos na operação, calculá-la antes\r\n    if (this._operationElements.length === 3) {\r\n      this.calculate('=')\r\n    }\r\n\r\n    // Adicionar elemento à operação\r\n    this._operationElements.push(value)\r\n  }\r\n\r\n  get lastNumber() {\r\n\r\n    // Retornar último elemento numérico\r\n    if (2 in this._operationElements) {\r\n      return this._operationElements[2]\r\n    }\r\n    return this._operationElements[0]\r\n  }\r\n\r\n  get lastOperationElement() {\r\n\r\n    // Retornar valor do último elemento da operação\r\n    return this._operationElements[this._operationElements.length - 1].toString()\r\n  }\r\n\r\n  set lastOperationElement(value) {\r\n\r\n    // Definir valor do último elemento da operação\r\n    this._operationElements[this._operationElements.length - 1] = value\r\n  }\r\n\r\n  get display() {\r\n\r\n    // Retornar valor impresso no display\r\n    return this._display.innerHTML\r\n  }\r\n\r\n  set display(value) {\r\n\r\n    // Inserir valor no elemento HTML\r\n    this._display.innerHTML = value\r\n  }\r\n\r\n  set displayTime(time) {\r\n\r\n    // ColocarPosicionar hora em elemento HTML\r\n    this._time.innerHTML = time\r\n  }\r\n\r\n  set displayDate(date) {\r\n\r\n    // ColocarPosicionar data em elemento HTML\r\n    this._date.innerHTML = date\r\n  }\r\n\r\n  // Retornar objeto 'Date' com a data e hora atuais\r\n  get currentDate() {\r\n    return new Date()\r\n  }\r\n}\r\n","import Calculator from './Calculator'\r\n\r\nnew Calculator()\r\n"]}