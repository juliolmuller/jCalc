{"version":3,"sources":["scripts/constants.js","scripts/Calculator.js","scripts/main.js"],"names":["LOCALE","DECIMAL_SEP","MAX_LENGTH","ErrorMsg","GENERAL","DIV_0","OVERFLOW","ADD_SUB","MUL_DIV","OP_SYMBOLS","OP_TRIGGERS","KEYS_MAP","BUTTONS_MAP","Calculator","_time","document","querySelector","_date","_operationElements","_display","_withAudio","_audio","Audio","clickAudio","initialize","_lastOperator","undefined","_lastOperated","_lastButtonPressed","self","refreshDateTime","refreshDisplay","setInterval","initAudioEvent","initButtonsEvents","initKeyboardEvents","displayTime","currentDate","toLocaleTimeString","opt","displayDate","toLocaleDateString","day","month","year","value","lastNumber","toString","isNaN","integerLen","addDecimalSep","indexOf","decimalLen","substr","length","throwError","parseFloat","toFixed","display","hasDecimals","string","img","getElementById","addEventListener","event","playAudio","src","soundOnIcon","soundOffIcon","buttons","querySelectorAll","forEach","button","textButton","className","baseVal","replace","pressButton","style","cursor","key","toLowerCase","ctrlKey","copyFromDisplay","content","clipboardData","getData","alert","captureOperation","console","log","input","createElement","body","appendChild","select","execCommand","remove","buttonText","clearAll","clearEntry","calculate","currentTime","play","operation","isDividingByZero","pushOperation","len","result","push","eval","join","errorMessage","isOperator","lastOperationElement","parseInt","innerHTML","time","date","Date"],"mappings":"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","file":"main.c3fa0158.js","sourceRoot":"..\\src","sourcesContent":["/*\r\n * Definir constantes globais\r\n */\r\nexport default {\r\n  LOCALE: 'PT-BR',\r\n  DECIMAL_SEP: '.',\r\n  MAX_LENGTH: 10,\r\n  ErrorMsg: {\r\n    GENERAL: '#ERROR#',\r\n    DIV_0: '#DIV 0#',\r\n    OVERFLOW: '#OVERFLOW#'\r\n  },\r\n  ADD_SUB: ['+', '-'],\r\n  MUL_DIV: ['*', '/'],\r\n  OP_SYMBOLS: ['+', '-', '*', '/'],\r\n  OP_TRIGGERS: ['=', '%'],\r\n  KEYS_MAP: {\r\n    '0': '0',\r\n    '1': '1',\r\n    '2': '2',\r\n    '3': '3',\r\n    '4': '4',\r\n    '5': '5',\r\n    '6': '6',\r\n    '7': '7',\r\n    '8': '8',\r\n    '9': '9',\r\n    '.': 'ponto',\r\n    ',': 'ponto',\r\n    '+': 'soma',\r\n    '-': 'subtracao',\r\n    '*': 'multiplicacao',\r\n    '/': 'divisao',\r\n    '=': 'igual',\r\n    'enter': 'igual',\r\n    '%': 'porcento',\r\n    'escape': 'ac',\r\n    'backspace': 'ce',\r\n    'delete': 'ce',\r\n    'c': 'copy'\r\n  },\r\n  BUTTONS_MAP: {\r\n    '0': 0,\r\n    '1': 1,\r\n    '2': 2,\r\n    '3': 3,\r\n    '4': 4,\r\n    '5': 5,\r\n    '6': 6,\r\n    '7': 7,\r\n    '8': 8,\r\n    '9': 9,\r\n    'ac': 'ac',\r\n    'ce': 'ce',\r\n    'ponto': '.',\r\n    'soma': '+',\r\n    'subtracao': '-',\r\n    'multiplicacao': '*',\r\n    'divisao': '/',\r\n    'igual': '=',\r\n    'porcento': '%'\r\n  }\r\n}\r\n","import opt from './constants'\r\nimport clickAudio from '../assets/audio/click.mp3'\r\nimport soundOnIcon from '../assets/images/sound-on.png'\r\nimport soundOffIcon from '../assets/images/sound-off.png'\r\n\r\nexport default class Calculator {\r\n\r\n  constructor() {\r\n\r\n    // Declarar atributos e seus valores padr√µes\r\n    this._time = document.querySelector('#hora')\r\n    this._date = document.querySelector('#data')\r\n    this._operationElements = [0]\r\n    this._display = document.querySelector('#display')\r\n    this._withAudio = true\r\n\r\n    // Configurar som de clique\r\n    this._audio = new Audio(clickAudio)\r\n\r\n    // Executar m√©todo de inicializa√ß√£o da aplica√ß√£o\r\n    this.initialize()\r\n\r\n    // Iniciar atributos que retem hist√≥rico de opera√ß√µes\r\n    this._lastOperator = undefined\r\n    this._lastOperated = undefined\r\n    this._lastButtonPressed = undefined\r\n  }\r\n\r\n  initialize() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Exibir conte√∫do inicial no display\r\n    self.refreshDateTime()\r\n    self.refreshDisplay()\r\n\r\n    // Executar 'refresh' do rel√≥gio\r\n    setInterval(function() {\r\n      self.refreshDateTime()\r\n    }, 1000)\r\n\r\n    // Configurar eventos de clique e teclado\r\n    self.initAudioEvent()\r\n    self.initButtonsEvents()\r\n    self.initKeyboardEvents()\r\n  }\r\n\r\n  refreshDateTime() {\r\n\r\n    // Chamar data e hora atuais e format√°-las\r\n    this.displayTime = this.currentDate.toLocaleTimeString(opt.LOCALE)\r\n    this.displayDate = this.currentDate.toLocaleDateString(opt.LOCALE, { day: '2-digit', month: 'long', year: 'numeric' })\r\n  }\r\n\r\n  refreshDisplay(value = undefined) {\r\n\r\n    // Validar se foi passado par√¢metro\r\n    value = value || this.lastNumber.toString()\r\n\r\n    // Tratar valor se ele for num√©rico\r\n    if (!isNaN(value)) {\r\n\r\n      // Converter valor em 'string'\r\n      value = value.toString()\r\n\r\n      // Verificar se o valor √© num√©rico e ajustar separador decimal\r\n      value = this.addDecimalSep(value)\r\n\r\n      // Salvar propriedades do valor\r\n      const integerLen = value.indexOf(opt.DECIMAL_SEP)\r\n      const decimalLen = value.substr(integerLen + 1, opt.MAX_LENGTH - integerLen).length\r\n\r\n      // Retornar erro se n√∫mero de casas inteiras forem superior ao m√°ximo\r\n      if (integerLen > opt.MAX_LENGTH) {\r\n        this.throwError(opt.ErrorMsg.OVERFLOW)\r\n        return\r\n\r\n      // Arredondar casas decimais para caber na tela\r\n      } else if (decimalLen >= 0) {\r\n\r\n        value = parseFloat(parseFloat(value).toFixed(decimalLen))\r\n      }\r\n\r\n      // Verificar se o valor √© num√©rico e ajustar separador decimal\r\n      value = this.addDecimalSep(value)\r\n    }\r\n\r\n    // Exibir valor na tela\r\n    this.display = value\r\n  }\r\n\r\n  addDecimalSep(value) {\r\n\r\n    // Verificar se o valor √© num√©rico e ajustar separador decimal\r\n    if (!this.hasDecimals(value)) {\r\n      value = value + opt.DECIMAL_SEP\r\n    }\r\n    return value\r\n  }\r\n\r\n  hasDecimals(string) {\r\n\r\n    // Contar o n√∫mero de separadores decimais do par√¢metro\r\n    return (string.toString().indexOf(opt.DECIMAL_SEP) > -1)\r\n  }\r\n\r\n  initAudioEvent() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Criar evento para ligar e desligar o som das teclas\r\n    const img = document.getElementById('toggle-audio')\r\n    img.addEventListener('click', event => {\r\n      self._withAudio = !self._withAudio\r\n\r\n      // Alternar √≠cone de som\r\n      if (self._withAudio) {\r\n        self.playAudio()\r\n        img.src = soundOnIcon\r\n      } else {\r\n        img.src = soundOffIcon\r\n      }\r\n    })\r\n  }\r\n\r\n  initButtonsEvents() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Capturar todos os elementos HTML relacionados aos bot√µes\r\n    const buttons = document.querySelectorAll('#buttons > g, #parts > g')\r\n\r\n    // Iterar sobre tipos de evento de clique do mouse\r\n    ;['click', 'drag'].forEach(event => {\r\n\r\n      // Iterar sobre os elementos, configurando o evento\r\n      buttons.forEach(button => {\r\n\r\n        // Definir evento para cliques simples e longos\r\n        button.addEventListener(event, function() {\r\n\r\n          // Retornar valor de elemento clicado\r\n          const textButton = button.className.baseVal.replace('btn-', '')\r\n          self.pressButton(textButton)\r\n        })\r\n      })\r\n    })\r\n\r\n    // Iterar sobre tipos de evento de ponteiro do mouse\r\n    ;['mouseover', 'mouseup', 'mousedown'].forEach(event => {\r\n\r\n      // Iterar sobre os elementos, configurando o evento\r\n      buttons.forEach(button => {\r\n\r\n        // Exibir ponteiro de 'clic√°vel' quando mouse passar sobre bot√µes\r\n        button.addEventListener(event, function() {\r\n          button.style.cursor = 'pointer'\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  initKeyboardEvents() {\r\n\r\n    // Criar constante apontando para o objeto 'this'\r\n    const self = this\r\n\r\n    // Definir evento de teclas pressionada do teclado\r\n    document.addEventListener('keyup', event => {\r\n\r\n      // Chamar bot√£o equivalente (ver constante 'KEYS_MAP')\r\n      const key = event.key.toLowerCase()\r\n      if (event.ctrlKey && key === 'c') {\r\n        self.playAudio()\r\n        self.copyFromDisplay()\r\n      } else {\r\n        self.pressButton(opt.KEYS_MAP[key])\r\n      }\r\n    })\r\n\r\n    // Definir evento de colagem de texto da √Årea de Transfer√™ncia\r\n    document.addEventListener('paste', event => {\r\n      const content = event.clipboardData.getData('Text')\r\n\r\n      // Validar texto colado como n√∫mero\r\n      if (isNaN(content)) {\r\n        alert(`Voc√™ est√° tentando colar conte√∫do que n√£o √© num√©rico:\\n\"${content}\"`)\r\n      } else {\r\n        self.playAudio()\r\n        self.captureOperation(content)\r\n        self.refreshDisplay()\r\n        console.log('Conte√∫do colado com sucesso!')\r\n      }\r\n    })\r\n  }\r\n\r\n  copyFromDisplay() {\r\n\r\n    // Criar um elemento HTML para armazenar o valor do display\r\n    const input = document.createElement('input')\r\n    document.body.appendChild(input)\r\n\r\n    // Copiar conte√∫do do display para o 'input'\r\n    input.value = parseFloat(this.display)\r\n\r\n    // Selecionar conte√∫do e copiar para a √Årea de Transfer√™ncia\r\n    input.select()\r\n    document.execCommand('Copy')\r\n\r\n    // Excluir elemento HTML\r\n    input.remove()\r\n    console.log('Conte√∫do copiado com sucesso!')\r\n  }\r\n\r\n  pressButton(buttonText) {\r\n\r\n    // Verificar se foi pressionada uma tecla v√°lida\r\n    if (buttonText in opt.BUTTONS_MAP) {\r\n\r\n      // Executar son de clique (se ativado)\r\n      this.playAudio()\r\n\r\n      // Executar a√ß√£o a partir de tecla selecionada\r\n      switch (buttonText) {\r\n        case 'ac':\r\n          this.clearAll()\r\n          break\r\n        case 'ce':\r\n          this.clearEntry()\r\n          break\r\n        case 'igual':\r\n        case 'porcento':\r\n          this.calculate(opt.BUTTONS_MAP[buttonText])\r\n          break\r\n        default:\r\n          this.captureOperation(opt.BUTTONS_MAP[buttonText])\r\n      }\r\n\r\n      // Registrar ultimo bot√£o pressionado e atualizar display\r\n      this._lastButtonPressed = opt.BUTTONS_MAP[buttonText]\r\n      this.refreshDisplay()\r\n    }\r\n  }\r\n\r\n  playAudio() {\r\n\r\n    // Verificar se o interruptor de a√∫dio est√° ligado\r\n    if (this._withAudio) {\r\n\r\n      // Colocar 'agulha' de √°udio na posi√ß√£o zero\r\n      this._audio.currentTime = 0\r\n      this._audio.play()\r\n    }\r\n  }\r\n\r\n  clearAll() {\r\n\r\n    // Apaga todos os registros de opera√ß√µes\r\n    this._operationElements = [0]\r\n    this._lastOperator = undefined\r\n    this._lastOperated = undefined\r\n  }\r\n\r\n  clearEntry() {\r\n\r\n    // Apaga o √∫ltimo registro de opera√ß√µes\r\n    if (this._operationElements.length === 1) {\r\n      this.clearAll()\r\n    } else if (this._operationElements.length === 3) {\r\n      this._operationElements[2] = 0\r\n    }\r\n  }\r\n\r\n  calculate(operation) {\r\n\r\n    // Verificar se par√¢metro cont√©m valor aceit√°vel\r\n    if (opt.OP_TRIGGERS.indexOf(operation) === -1) {\r\n      return\r\n    }\r\n\r\n    // Declarar fun√ß√£o para avaliar se a opera√ß√£o realizar√° divis√£o por 0 (zero)\r\n    const isDividingByZero = () => {\r\n      // eslint-disable-next-line eqeqeq\r\n      if (this._operationElements[1] === '/' && this._operationElements[2] == 0) {\r\n        this._operationElements = [0]\r\n        this.throwError(opt.ErrorMsg.DIV_0)\r\n        return true\r\n      }\r\n      return false\r\n    }\r\n\r\n    // Avaliar se trata-se de repeti√ß√£o da √∫ltima opera√ß√£o\r\n    if (opt.OP_TRIGGERS.indexOf(this._lastButtonPressed) > -1 && operation === '=') {\r\n      this.pushOperation(this._lastOperator)\r\n      this.pushOperation(this._lastOperated)\r\n    }\r\n\r\n    // Declarar vari√°veis locais\r\n    const len = this._operationElements.length\r\n    let result\r\n    switch (len) {\r\n\r\n      case 1:\r\n        if (operation === '%') {\r\n          result = this._operationElements[0] / 100\r\n        } else if (operation === '=') {\r\n          result = this._operationElements[0]\r\n        }\r\n        break\r\n\r\n      case 2:\r\n        this._operationElements.push(this._operationElements[0])\r\n        // falls through\r\n\r\n      case 3:\r\n        if (isDividingByZero()) {\r\n          return\r\n        }\r\n\r\n        if (operation === '%') {\r\n          if (opt.ADD_SUB.indexOf(this._operationElements[1]) > -1) {\r\n            this._operationElements[2] = this._operationElements[0] * this._operationElements[2] / 100\r\n          } else {\r\n            this._operationElements[2] = this._operationElements[2] / 100\r\n          }\r\n        }\r\n\r\n        // Salvar √∫ltimas opera√ß√µes\r\n        this._lastOperator = this._operationElements[1]\r\n        this._lastOperated = this._operationElements[2]\r\n\r\n        // Fazer o parse dos dos elementos da opera√ß√£o e executar c√°lculo\r\n        result = eval(this._operationElements.join(''))\r\n    }\r\n\r\n    // Salvar resultado como elemento de opera√ß√µes\r\n    this._operationElements = [result]\r\n  }\r\n\r\n  throwError(errorMessage = undefined) {\r\n\r\n    // Verificar se houve par√¢metro informado\r\n    errorMessage = errorMessage || opt.ErrorMsg.GENERAL\r\n\r\n    // Exibi mensagem de rro na tela\r\n    this.refreshDisplay(errorMessage)\r\n  }\r\n\r\n  captureOperation(value) {\r\n\r\n    // Se o √∫ltimo elemento da opera√ß√£o for um operador aritm√©tico\r\n    if (this.isOperator(this.lastOperationElement)) {\r\n\r\n      // Substituir operador aritm√©tico se input for tamb√©m um operador aritm√©tico\r\n      if (this.isOperator(value)) {\r\n        this.lastOperationElement = value\r\n\r\n      // Inserir '0.' como novo elemento da opera√ß√£o se o input for o separador decimal\r\n      } else if (value === opt.DECIMAL_SEP) {\r\n        this.pushOperation('0' + opt.DECIMAL_SEP)\r\n\r\n      // Adicionar novo elemento √† opera√ß√£o como n√∫mero, se um n√∫mero foi digitado\r\n      } else if (!isNaN(value)) {\r\n        this.pushOperation(parseInt(value))\r\n      }\r\n\r\n    // Se o √∫ltimo elemento da opera√ß√£o for um 'number'\r\n    } else if (!isNaN(this.lastOperationElement)) {\r\n\r\n      // Adicionar input operador como novo elemento da opera√ß√£o\r\n      if (this.isOperator(value)) {\r\n        this.pushOperation(value)\r\n\r\n      // Reiniciar opera√ß√£o se o √∫ltimo valor √© resultado de outra opera√ß√£o\r\n      } else if (this._lastButtonPressed === '=' && !isNaN(value)) {\r\n\r\n        // Inserir '0.' como novo elemento da opera√ß√£o se o input for o separador decimal\r\n        if (value === opt.DECIMAL_SEP) {\r\n          this._operationElements = ['0' + opt.DECIMAL_SEP]\r\n\r\n        // Adicionar novo elemento √† opera√ß√£o como n√∫mero, se um n√∫mero foi digitado\r\n        } else if (!isNaN(value)) {\r\n          this._operationElements = [parseInt(value)]\r\n        }\r\n\r\n      // Concatenar input separador decimal se ainda n√£o h√° separadores no valor atual\r\n      } else if (value === opt.DECIMAL_SEP && !this.hasDecimals(this.lastOperationElement)) {\r\n        this.lastOperationElement += value\r\n\r\n      // Concatenar input num√©rico ao valor atual\r\n      } else if (!isNaN(value)) {\r\n\r\n        // Se o input j√° tem valores decimais, simplesmente concatenar\r\n        // eslint-disable-next-line eqeqeq\r\n        if (value == 0 && this.hasDecimals(this.lastOperationElement)) {\r\n          this.lastOperationElement += value\r\n\r\n        // Caso contr√°rio, fazer o parse para 'string' e concatenar\r\n        } else {\r\n          this.lastOperationElement = parseFloat(this.lastOperationElement + value)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  isOperator(value) {\r\n\r\n    // Avaliar se o par√¢metro √© um operador aritm√©tico\r\n    return (opt.OP_SYMBOLS.indexOf(value) > -1)\r\n  }\r\n\r\n  pushOperation(value) {\r\n\r\n    // Dr j√° h√° 3 elementos na opera√ß√£o, calcul√°-la antes\r\n    if (this._operationElements.length === 3) {\r\n      this.calculate('=')\r\n    }\r\n\r\n    // Adicionar elemento √† opera√ß√£o\r\n    this._operationElements.push(value)\r\n  }\r\n\r\n  get lastNumber() {\r\n\r\n    // Retornar √∫ltimo elemento num√©rico\r\n    if (2 in this._operationElements) {\r\n      return this._operationElements[2]\r\n    }\r\n    return this._operationElements[0]\r\n  }\r\n\r\n  get lastOperationElement() {\r\n\r\n    // Retornar valor do √∫ltimo elemento da opera√ß√£o\r\n    return this._operationElements[this._operationElements.length - 1].toString()\r\n  }\r\n\r\n  set lastOperationElement(value) {\r\n\r\n    // Definir valor do √∫ltimo elemento da opera√ß√£o\r\n    this._operationElements[this._operationElements.length - 1] = value\r\n  }\r\n\r\n  get display() {\r\n\r\n    // Retornar valor impresso no display\r\n    return this._display.innerHTML\r\n  }\r\n\r\n  set display(value) {\r\n\r\n    // Inserir valor no elemento HTML\r\n    this._display.innerHTML = value\r\n  }\r\n\r\n  set displayTime(time) {\r\n\r\n    // ColocarPosicionar hora em elemento HTML\r\n    this._time.innerHTML = time\r\n  }\r\n\r\n  set displayDate(date) {\r\n\r\n    // ColocarPosicionar data em elemento HTML\r\n    this._date.innerHTML = date\r\n  }\r\n\r\n  // Retornar objeto 'Date' com a data e hora atuais\r\n  get currentDate() {\r\n    return new Date()\r\n  }\r\n}\r\n","import Calculator from './Calculator'\r\n\r\nnew Calculator()\r\n"]}